---
- name: create VPC
  ec2_vpc_net:
    name: "{{ vpc_name }}"
    cidr_block: "{{ vpc_cidr_block }}"
    region: "{{ aws_region }}"
    state: present
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
  register: vpc

- name:               Set VPC ID in variable
  set_fact:
    vpc_id:           "{{ vpc.vpc.id }}"

- name: associate subnet to the VPC
  ec2_vpc_subnet:
    state: present
    vpc_id: "{{ vpc_id }}"
    region: "{{ aws_region }}"
    cidr: "{{ subnet_cidr1 }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    map_public: yes
  register: subnet1

- name: associate subnet to the VPC
  ec2_vpc_subnet:
    state: present
    vpc_id: "{{ vpc_id }}"
    region: "{{ aws_region }}"
    cidr: "{{ subnet_cidr2 }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    map_public: yes
  register: subnet2

- name: associate subnet to the VPC
  ec2_vpc_subnet:
    state: present
    vpc_id: "{{ vpc_id }}"
    region: "{{ aws_region }}"
    cidr: "{{ subnet_cidr3 }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    map_public: yes
  register: subnet3

- name: create IGW
  ec2_vpc_igw:
    vpc_id: "{{ vpc_id }}"
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    state: "present"
    tags:
      Name: "{{ igw_name }}"
  register: igw

- name: Route IGW
  ec2_vpc_route_table:
      vpc_id: "{{ vpc_id }}"
      region: "{{ aws_region }}"
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      subnets:
        - "{{ subnet1.subnet.id }}"
        - "{{ subnet2.subnet.id }}"
        - "{{ subnet3.subnet.id }}"
      routes:
        - dest: 0.0.0.0/0
          gateway_id: "{{ igw.gateway_id  }}"
      tags:
        Name: "Route_Table"

- name: Create Security Group
  ec2_group:
      name: Web DMZ
      description: DMZ Security Group
      vpc_id: "{{ vpc_id }}"
      region: "{{ aws_region }}"
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      rules:
        - proto: tcp
          ports:
            - 80
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          ports:
            - 22
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          ports:
            - 443
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          ports:
            - 8080
          cidr_ip: 0.0.0.0/0
  register: security_group

- name: Create a new Ec2 key pair
  ec2_key:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      name: ec2_keypair
      region : "{{ aws_region }}"
  register : keypair

- name: Copy EC2 Private Key locally so it can be later on used to SSH into the instance
  copy: content="{{ keypair.key.private_key }}" dest={{ ec2_key_directory }}key.ppk mode=400
  when: keypair.changed == true


- name: Create a Ec2 server
  ec2:
      assign_public_ip: "yes"
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      image: ami-04b9e92b5572fa0d1
      instance_type : t2.micro
      region : "{{aws_region}}"
      group_id: "{{ security_group.group_id }}"
      vpc_subnet_id: "{{ subnet1.subnet.id }}"
      key_name: "{{ keypair.key.name  }}"
      count_tag:
        app: jenkins
      instance_tags:
        app: jenkins
      exact_count: 1
      wait: true
  register : Myec2

- name: Add A record for the new EC2 instance IP in Route53.
  route53:
    command: create
    zone: jenkins.csye6225-su19-tanwarp.me.
    record: jenkins.csye6225-su19-tanwarp.me.
    type: A
    ttl: 300
    value: "{{ Myec2.tagged_instances.0.public_ip }}"
    wait: true
    overwrite: true

- name: Add EC2 instance to inventory groups.
  add_host:
      name: "jenkins.csye6225-su19-tanwarp.me."
      groups: "aws,aws_nginx"
      ansible_ssh_user: ubuntu
      host_key_checking: false
  when: Myec2.tagged_instances.0.id is defined




